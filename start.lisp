; Utilities

(defpackage utils
	(:use cl)
	(:export treep)
	(:export maptree)
	(:export find-element)
	(:export string-sanitize)
	(:export now)
	(:export polar-to-cartesian)
	(:export uuid)
	(:export short-uuid)
	(:export string-glue)
	(:export splice))

(load "utils.lisp")

; SEML: basic XML primitives

(defpackage seml
	(:use cl)
	(:shadow element)	(:export element)
	(:export empty-element)
	(:export print-tree)
	(:export open-tag)
	(:export close-tag)
	(:export empty-tag)
	(:export attribute-pair)
	(:export attribute-string)
	(:export make-element)
	(:export make-empty-element)
	(:export serialize)
	(:export attributes)
	(:export make-attribute-forms)
	(:export make-attribute-string)
	(:export *generator*)
)

(load "seml.lisp")

; MATHSEML: MathML primitives and macros

(defpackage mathseml
	(:use cl)
	(:use seml)
	(:shadow math) (:export math)
	(:export mrow)
	(:export msup)
	(:export msub)
	(:export mi)
	(:export mo)
	(:export mn)
	(:export mfrac)
	(:export mfenced)
	(:export msqrt)
	(:export mroot)
	(:export ms)
	(:export mtext)
	(:export mspace)
	; end primitives
	(:shadow equals) (:export equals)
	(:shadow =)	(:export =)
	(:shadow +)	(:export +)
	(:shadow -)	(:export -)
	(:shadow *)	(:export *)
	(:shadow /)	(:export /)
	(:export plus)
	(:export minus)
	(:export mult)
	(:export fract)
	(:shadow expt) (:export expt)
	(:shadow sqrt) (:export sqrt)
	(:shadow root) (:export root)
	(:shadow and) (:export and)
	(:shadow or) (:export or)
	(:shadow not) (:export not)
	(:shadow factor) (:export factor)
	(:shadow abs) (:export abs)
	(:shadow vector) (:export vector)
	(:shadow matrix) (:export matrix)
	(:export forall)
	(:export exists)
	(:export implies)
	(:export bimplies)
	(:export is-in)
	(:export not-in)
	(:shadow union) (:export union)
	(:export intersect)
	(:export diff)
	(:export subset)
	(:export not-subset)
	(:export integers)
	(:export reals)
	(:export empty-set)
	(:export iff)
	(:shadow doctype)	(:export doctype)
)

(load "mathseml.lisp")

; SEMANTRIX: Semantic web tools

(defpackage semantrix
	(:use cl)
	(:use utils)
	(:export dc)
	(:export description)
	(:export make-dc)
	(:export dc-creator)
	(:export dc-date)
	(:export dc-summary)
	(:export dc-format)
	(:export dc-identifier)
	(:export dc-language)
	(:export dc-publisher)
	(:export dc-relation)
	(:export dc-rights)
	(:export dc-source)
	(:export dc-subject)
	(:export dc-title)
	(:export dc-type)
	(:export dc-email)
	(:export dc-phone)
	(:export person)
	(:export person-given-name)
	(:export person-family-name)
)
(load "rdf.lisp")

(defpackage seml-svg
	(:use cl)
	(:use seml)
	(:use semantrix)
	(:export svg)
	(:export defs)
	(:export g)
	(:export use)
	(:export path)
	(:export line)
	(:export rect)
	(:export circle)
	(:export text)
	(:export pie-chart)
	(:export bar-chart)
)
(load "seml-svg.lisp")

; HTSEML: HTML5 primitives

(defpackage htseml
	(:use cl)
	(:use seml)
	(:use seml-svg)
	(:export html)
	(:export head)
	(:export link)
	(:export title)
	(:export style)
	(:export body)
	(:export main)
	(:export article)
	(:export aside)
	(:export section)
	(:export header)
	(:export a)
	(:export h1)
	(:export h2)
	(:export h3)
	(:export h4)
	(:export p)
	(:export img)
	(:export ol)
	(:export ul)
	(:export li)
	(:export b)
	(:export i)
	(:export em)
	(:export strong)
	(:export pre)
	(:export meta)
	(:export div)
	(:export span)
	(:export code)
	(:export table)
	(:export tr)
	(:export th)
	(:export td)
	(:export sidebar)
	(:export caution)
	(:export tip)
	(:export figure)
	(:export figcaption)
	(:export legend)
	(:export caption)
	(:export br)
	(:export blockquote)
	(:export cite)
	(:shadow doctype)	(:export doctype)
	(:export hr)
	(:export dl)
	(:export dt)
	(:export dd)
	(:export summary)
	(:export details)
	(:export ruby)
	(:export rt)
)

(load "htseml.lisp")

; EFFABLE: The 21st century document preparation system.
; EFFABLE-ML: Effable to HTML 5+MathML.

(defpackage effable-ml
	(:shadow doctype)
	(:use cl)
	(:use seml)
	(:use mathseml)
	(:use semantrix)
	(:use seml-svg)
	(:use utils)
	(:import-from semantrix person)
	(:import-from semantrix make-person)
	(:import-from semantrix person-additional-name)
	(:import-from semantrix person-address)
	(:import-from semantrix person-email)
	(:import-from semantrix person-family-name)
	(:import-from semantrix person-gender)
	(:import-from semantrix person-github)
	(:import-from semantrix person-given-name)
	(:import-from semantrix person-nationality)
	(:import-from semantrix person-personal-web)
	(:import-from semantrix person-professional-web)
	(:import-from semantrix person-telephone)
	(:import-from semantrix description)
	(:import-from semantrix make-dc)
	(:import-from semantrix dc-p)
	(:import-from semantrix dc-creator)
	(:import-from semantrix dc-date)
	(:import-from semantrix dc-summary)
	(:import-from semantrix dc-format)
	(:import-from semantrix dc-identifier)
	(:import-from semantrix dc-keywords)
	(:import-from semantrix dc-language)
	(:import-from semantrix dc-publisher)
	(:import-from semantrix dc-relation)
	(:import-from semantrix dc-rights)
	(:import-from semantrix dc-source)
	(:import-from semantrix dc-subject)
	(:import-from semantrix dc-title)
	(:import-from semantrix dc-type)
	(:import-from semantrix dc-email)
	(:import-from semantrix dc-phone)
	(:shadowing-import-from mathseml =)
	(:shadowing-import-from mathseml +)
	(:shadowing-import-from mathseml -)
	(:shadowing-import-from mathseml *)
	(:shadowing-import-from mathseml /)
	(:shadowing-import-from mathseml sqrt)
	(:shadowing-import-from mathseml root)
	(:shadowing-import-from mathseml expt)
	(:shadowing-import-from mathseml and)
	(:shadowing-import-from mathseml or)
	(:shadowing-import-from mathseml not)
	(:shadowing-import-from mathseml abs)
	(:shadowing-import-from mathseml vector)
	(:shadowing-import-from mathseml factor)
	(:shadowing-import-from mathseml mtable)
	(:shadowing-import-from mathseml mtr)
	(:shadowing-import-from mathseml mtd)
	(:shadowing-import-from mathseml union)
	(:shadowing-import-from mathseml diff)
	(:shadowing-import-from mathseml intersect)
	(:shadow doctype)
	(:export doctype)
	(:shadow section)
	(:export section)
	(:shadow p)
	(:export p)
	(:shadow em)
	(:export em)
	(:shadow cite) (:export cite)
	(:shadow code) (:export code)
	(:export verbatim)
	(:export image)
	(:export ol)
	(:export ul)
	(:export li)
	(:shadow datetime) (:export datetime)
	(:export quotation)
	(:export top-matter)
	(:export main-matter)
	(:export back-matter)
	(:export tip)
	(:export warning)
	(:export l)
	(:export table)
	(:export trow)
	(:export thead)
	(:export rule)
	(:shadow serialize)
	(:export serialize)
)

(load "effable-ml.lisp")

(defpackage epub-meta
	(:use cl)
	(:use seml)
	(:use semantrix)
	(:shadow package)
	(:export package)
	(:shadow manifest)
	(:export manifest)
	(:shadow metadata)
	(:export metadata)
	(:shadow item)
	(:export item)
	(:shadow guide)
	(:export guide)
	(:shadow reference)
	(:export reference)
	(:shadow spine)
	(:export spine)
	(:shadow idref)
	(:export idref)
)

(load "epub-meta.lisp")

(defpackage effable-epub
	(:use cl)
	(:use utils)
	(:use seml)
	(:use effable-ml)
	(:use epub-meta)
	(:import-from epub-meta description)
	(:import-from epub-meta person)
	(:import-from epub-meta make-dc)
	(:import-from semantrix dc-p)
	(:import-from epub-meta dc-creator)
	(:import-from epub-meta dc-date)
	(:import-from epub-meta dc-summary)
	(:import-from epub-meta dc-format)
	(:import-from epub-meta dc-identifier)
	(:import-from epub-meta dc-language)
	(:import-from epub-meta dc-publisher)
	(:import-from epub-meta dc-relation)
	(:import-from epub-meta dc-rights)
	(:import-from epub-meta dc-source)
	(:import-from epub-meta dc-subject)
	(:import-from epub-meta dc-title)
	(:import-from epub-meta dc-type)
	(:import-from epub-meta make-dc-metadata)
	(:shadowing-import-from epub-meta package)
	(:export chapter)
	(:export title-page)
	(:export obverse)
	(:import-from effable-ml abstract)
	(:import-from effable-ml p)
	(:import-from effable-ml section)
	(:import-from effable-ml ssection)
	(:import-from effable-ml sssection)
	(:import-from effable-ml sidebar)
	(:import-from effable-ml caution)
	(:import-from effable-ml tip)
	(:shadow serialize)
	(:export serialize)
)

(load "effable-epub.lisp")

; Load reader macros, not part of any package in particular but depend on HTSEML
;(load "reader-macros.lisp")

(in-package common-lisp-user)

;(defun start-effable nil (progn (load "effable-ml.lisp") (in-package effable-ml)))
(defun start-epub nil (progn (load "effable-epub.lisp") (in-package effable-epub)))
